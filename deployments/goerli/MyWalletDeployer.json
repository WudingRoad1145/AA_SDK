{
  "address": "0x8f927c27926750632e1624E2c573BF7bDf94f16A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "entryPoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "deployWallet",
      "outputs": [
        {
          "internalType": "contract MyWallet",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "entryPoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "getDeploymentAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x06dabc3131f6cf2135f13d758775e981461bb073aace874e3792024677b6de68",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5c9CB0115DdE2CCD8819E0AC9a01CAFE30Be8Ba8",
    "contractAddress": null,
    "transactionIndex": 60,
    "gasUsed": "2049497",
    "logsBloom": "0x
    "blockHash": "0xf90b70c464a199b7198ae3901c1bb2fdb95eda56f650ab5f1b732e33b758b7f8",
    "transactionHash": "0x06dabc3131f6cf2135f13d758775e981461bb073aace874e3792024677b6de68",
    "logs": [],
    "blockNumber": 7739033,
    "cumulativeGasUsed": "19663819",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "4607bbfb612f84beea6ecb2a5d122cfe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"deployWallet\",\"outputs\":[{\"internalType\":\"contract MyWallet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getDeploymentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"a sampler deployer contract for SimpleWallet the \\\"initCode\\\" for a wallet hold its address and a method call (deployWallet) with parameters, not actual constructor code.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MyWalletDeployer.sol\":\"MyWalletDeployer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@account-abstraction/contracts/core/BaseWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"../interfaces/IWallet.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\n\\n/**\\n * Basic wallet implementation.\\n * this contract provides the basic logic for implementing the IWallet interface  - validateUserOp\\n * specific wallet implementation should inherit it and provide the wallet-specific logic\\n */\\nabstract contract BaseWallet is IWallet {\\n    using UserOperationLib for UserOperation;\\n\\n    /**\\n     * return the wallet nonce.\\n     * subclass should return a nonce value that is used both by _validateAndUpdateNonce, and by the external provider (to read the current nonce)\\n     */\\n    function nonce() public view virtual returns (uint256);\\n\\n    /**\\n     * return the entryPoint used by this wallet.\\n     * subclass should return the current entryPoint used by this wallet.\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint);\\n\\n    /**\\n     * Validate user's signature and nonce.\\n     * subclass doesn't override this method. instead, it should override the specific internal validation methods.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 requestId, address aggregator, uint256 missingWalletFunds) external override {\\n        _requireFromEntryPoint();\\n        _validateSignature(userOp, requestId, aggregator);\\n        //during construction, the \\\"nonce\\\" field hold the salt.\\n        // if we assert it is zero, then we allow only a single wallet per owner.\\n        if (userOp.initCode.length == 0) {\\n            _validateAndUpdateNonce(userOp);\\n        }\\n        _payPrefund(missingWalletFunds);\\n    }\\n\\n    /**\\n     * ensure the request comes from the known entrypoint.\\n     */\\n    function _requireFromEntryPoint() internal virtual view {\\n        require(msg.sender == address(entryPoint()), \\\"wallet: not from EntryPoint\\\");\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param requestId convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain-id)\\n     * @param aggregator the current aggregator. can be ignored by wallets that don't use aggregators\\n     */\\n    function _validateSignature(UserOperation calldata userOp, bytes32 requestId, address aggregator) internal virtual view;\\n\\n    /**\\n     * validate the current nonce matches the UserOperation nonce.\\n     * then it should update the wallet's state to prevent replay of this UserOperation.\\n     * called only if initCode is empty (since \\\"nonce\\\" field is used as \\\"salt\\\" on wallet creation)\\n     * @param userOp the op to validate.\\n     */\\n    function _validateAndUpdateNonce(UserOperation calldata userOp) internal virtual;\\n\\n    /**\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\n     * subclass MAY override this method for better funds management\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\n     * it will not be required to send again)\\n     * @param missingWalletFunds the minimum value this method should send the entrypoint.\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n     */\\n    function _payPrefund(uint256 missingWalletFunds) internal virtual {\\n        if (missingWalletFunds != 0) {\\n            (bool success,) = payable(msg.sender).call{value : missingWalletFunds, gas : type(uint256).max}(\\\"\\\");\\n            (success);\\n            //ignore failure (its EntryPoint's job to verify, not wallet.)\\n        }\\n    }\\n\\n    /**\\n     * expose an api to modify the entryPoint.\\n     * must be called by current \\\"admin\\\" of the wallet.\\n     * @param newEntryPoint the new entrypoint to trust.\\n     */\\n    function updateEntryPoint(address newEntryPoint) external {\\n        _requireFromAdmin();\\n        _updateEntryPoint(newEntryPoint);\\n    }\\n\\n    /**\\n     * ensure the caller is allowed \\\"admin\\\" operations (such as changing the entryPoint)\\n     * default implementation trust the wallet itself (or any signer that passes \\\"validateUserOp\\\")\\n     * to be the \\\"admin\\\"\\n     */\\n    function _requireFromAdmin() internal view virtual {\\n        require(msg.sender == address(this) || msg.sender == address(entryPoint()), \\\"not admin\\\");\\n    }\\n\\n    /**\\n     * update the current entrypoint.\\n     * subclass should override and update current entrypoint\\n     */\\n    function _updateEntryPoint(address) internal virtual;\\n}\\n\",\"keccak256\":\"0x3d9a244b31521b59d7716db9412691d411e8b7d026413a769b8cb8065c7e3e69\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is called by EntryPoint.simulateUserOperation() if the wallet has an aggregator.\\n     * First it validates the signature over the userOp. then it return data to be used when creating the handleOps:\\n     * @param userOp the userOperation received from the user.\\n     * @param offChainSigCheck if true, don't check signature, and leave it for the Bundler to use an off-chain native library.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless wallet and aggregator support some kind of \\\"multisig\\\"\\n     * @return sigForAggregation the value to pass (for all wallets) to aggregateSignatures()\\n     * @return offChainSigInfo in case offChainSigCheck is true, this value should be used by the off-chain signature code (e.g. it contains the sender's publickey)\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp, bool offChainSigCheck)\\n    external view returns (bytes memory sigForUserOp, bytes memory sigForAggregation, bytes memory offChainSigInfo);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param sigsForAggregation array of values returned by validateUserOpSignature() for each op\\n   * @return aggregatesSignature the aggregated signature\\n   */\\n    function aggregateSignatures(bytes[] calldata sigsForAggregation) external view returns (bytes memory aggregatesSignature);\\n}\\n\",\"keccak256\":\"0x3a3a7bf97e9b17144748bcd745edc0b8c4605781b349976db17a3031528f360c\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param requestId - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request\\n     * @param actualGasCost - the total cost (in gas) of this request.\\n     * @param actualGasPrice - the actual gas price the sender agreed to pay.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     */\\n    event UserOperationEvent(bytes32 indexed requestId, address indexed sender, address indexed paymaster, uint256 nonce, uint256 actualGasCost, uint256 actualGasPrice, bool success);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param requestId the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed requestId, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param paymaster - if paymaster.validatePaymasterUserOp fails, this will be the paymaster's address. if validateUserOp failed,\\n     *       this value will be zero (since it failed before accessing the paymaster)\\n     *  @param reason - revert reason\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of wallet/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, address paymaster, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any wallet requires an aggregator (that is, it returned an \\\"actualAggregator\\\" when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator wallets)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getRequestId(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n    * Simulate a call to wallet.validateUserOp and paymaster.validatePaymasterUserOp.\\n    * Validation succeeds if the call doesn't revert.\\n    * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the wallet's data.\\n     *      In order to split the running opcodes of the wallet (validateUserOp) from the paymaster's validatePaymasterUserOp,\\n     *      it should look for the NUMBER opcode at depth=1 (which itself is a banned opcode)\\n     * @param userOp the user operation to validate.\\n     * @param offChainSigCheck if the wallet has an aggregator, skip on-chain aggregation check. In thus case, the bundler must\\n     *          perform the equivalent check using an off-chain library code\\n     * @return preOpGas total gas used by validation (including contract creation)\\n     * @return prefund the amount the wallet had to prefund (zero in case a paymaster pays)\\n     * @return actualAggregator the aggregator used by this userOp. if a non-zero aggregator is returned, the bundler must get its params using\\n     *      aggregator.\\n     * @return sigForUserOp - only if has actualAggregator: this value is returned from IAggregator.validateUserOpSignature, and should be placed in the userOp.signature when creating a bundle.\\n     * @return sigForAggregation  - only if has actualAggregator:  this value is returned from IAggregator.validateUserOpSignature, and should be passed to aggregator.aggregateSignatures\\n     * @return offChainSigInfo - if has actualAggregator, and offChainSigCheck is true, this value should be used by the off-chain signature code (e.g. it contains the sender's publickey)\\n     */\\n    function simulateValidation(UserOperation calldata userOp, bool offChainSigCheck)\\n    external returns (uint256 preOpGas, uint256 prefund, address actualAggregator, bytes memory sigForUserOp, bytes memory sigForAggregation, bytes memory offChainSigInfo);\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * must be called from zero-address.\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external returns (address);\\n\\n    /**\\n     * return the storage cells used internally by the EntryPoint for this sender address.\\n     * During `simulateValidation`, allow these storage cells to be accessed\\n     *  (that is, a wallet/paymaster are allowed to access their own deposit balance on the\\n     *  EntryPoint's storage, but no other account)\\n     */\\n    function getSenderStorage(address sender) external view returns (uint256[] memory senderStorageCells);\\n}\\n\\n\",\"keccak256\":\"0xf052400aff95b11c5e9af5f25702d0b3a4207872e8d34beb4c52dbe048532e85\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or a wallet)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by a paymaster.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 withdrawTime\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * minimum time (in seconds) required to lock a paymaster stake before it can be withdraw.\\n     */\\n    function unstakeDelaySec() external returns (uint32);\\n\\n    /**\\n     * minimum value required to stake for a paymaster\\n     */\\n    function paymasterStake() external returns (uint256);\\n\\n    /**\\n     * @param deposit the account's deposit\\n     * @param staked true if this account is staked as a paymaster\\n     * @param stake actual amount of ether staked for this paymaster. must be above paymasterStake\\n     * @param unstakeDelaySec minimum delay to withdraw the stake. must be above the global unstakeDelaySec\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 2^15 eth\\n     *    64 bit for full timestamp\\n     *    32 bit allow 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint64 withdrawTime;\\n    }\\n\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xf2a242b657ba0a1568022752a2b9e3bbf83edb5a980fdcc52c1258c7c8d90bd3\",\"license\":\"GPL-3.0-only\"},\"@account-abstraction/contracts/interfaces/IWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IWallet {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param requestId hash of the user's request data. can be used as the basis for signature.\\n     * @param aggregator the aggregator used to validate the signature. NULL for non-aggregated signature wallets.\\n     * @param missingWalletFunds missing funds on the wallet's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 requestId, address aggregator, uint256 missingWalletFunds) external;\\n}\\n\",\"keccak256\":\"0x9faeb4f22e20c1f05ac617adf0a9b66bd5d32c32674fc227cdae6d11f8491e4f\",\"license\":\"GPL-3.0\"},\"@account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n    /**\\n     * User Operation struct\\n     * @param sender the sender account of this request\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor\\n     * @param callData the method call to execute on this account.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter\\n     * @param paymasterAndData if set, this field hold the paymaster address and \\\"paymaster-specific-data\\\". the paymaster will pay for the transaction instead of the sender\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/miner might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        //lighter signature scheme. must match UserOp.ts#packUserOp\\n        bytes calldata sig = userOp.signature;\\n        // copy directly the userOp from calldata up to (but not including) the signature.\\n        // this encoding depends on the ABI encoding of calldata, but is much lighter to copy\\n        // than referencing each field separately.\\n        assembly {\\n            let ofs := userOp\\n            let len := sub(sub(sig.offset, ofs), 32)\\n            ret := mload(0x40)\\n            mstore(0x40, add(ret, add(len, 32)))\\n            mstore(ret, len)\\n            calldatacopy(add(ret, 32), ofs, len)\\n        }\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x223214375bdcf5670f16cbe4697ce5eae0cd673760db92491ad37967fbb3a6d0\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/MyWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"@account-abstraction/contracts/core/BaseWallet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * minimal wallet.\\n *  this is sample minimal wallet.\\n *  has execute, eth handling methods\\n *  has a single signer that can send requests through the entryPoint.\\n */\\ncontract MyWallet is BaseWallet {\\n    using ECDSA for bytes32;\\n    using UserOperationLib for UserOperation;\\n\\n    //explicit sizes of nonce, to fit a single storage cell with \\\"owner\\\"\\n    uint96 private _nonce;\\n    address public owner;\\n\\n    function nonce() public view virtual override returns (uint256) {\\n        return _nonce;\\n    }\\n\\n    function entryPoint() public view virtual override returns (IEntryPoint) {\\n        return _entryPoint;\\n    }\\n\\n    IEntryPoint private _entryPoint;\\n\\n    event EntryPointChanged(\\n        address indexed oldEntryPoint,\\n        address indexed newEntryPoint\\n    );\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    constructor(IEntryPoint anEntryPoint, address anOwner) {\\n        _entryPoint = anEntryPoint;\\n        owner = anOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() internal view {\\n        //directly from EOA owner, or through the entryPoint (which gets redirected through execFromEntryPoint)\\n        require(\\n            msg.sender == owner || msg.sender == address(this),\\n            \\\"only owner\\\"\\n        );\\n    }\\n\\n    /**\\n     * transfer eth value to a destination address\\n     */\\n    function transfer(address payable dest, uint256 amount) external onlyOwner {\\n        dest.transfer(amount);\\n    }\\n\\n    /**\\n     * execute a transaction (called directly from owner, not by entryPoint)\\n     */\\n    function exec(\\n        address dest,\\n        uint256 value,\\n        bytes calldata func\\n    ) external onlyOwner {\\n        _call(dest, value, func);\\n    }\\n\\n    /**\\n     * execute a sequence of transaction\\n     */\\n    function execBatch(address[] calldata dest, bytes[] calldata func)\\n        external\\n        onlyOwner\\n    {\\n        require(dest.length == func.length, \\\"wrong array lengths\\\");\\n        for (uint256 i = 0; i < dest.length; i++) {\\n            _call(dest[i], 0, func[i]);\\n        }\\n    }\\n\\n    /**\\n     * change entry-point:\\n     * a wallet must have a method for replacing the entryPoint, in case the the entryPoint is\\n     * upgraded to a newer version.\\n     */\\n    function _updateEntryPoint(address newEntryPoint) internal override {\\n        emit EntryPointChanged(address(_entryPoint), newEntryPoint);\\n        _entryPoint = IEntryPoint(payable(newEntryPoint));\\n    }\\n\\n    function _requireFromAdmin() internal view override {\\n        _onlyOwner();\\n    }\\n\\n    /**\\n     * validate the userOp is correct.\\n     * revert if it doesn't.\\n     * - must only be called from the entryPoint.\\n     * - make sure the signature is of our supported signer.\\n     * - validate current nonce matches request nonce, and increment it.\\n     * - pay prefund, in case current deposit is not enough\\n     */\\n    function _requireFromEntryPoint() internal view override {\\n        require(\\n            msg.sender == address(entryPoint()),\\n            \\\"wallet: not from EntryPoint\\\"\\n        );\\n    }\\n\\n    // called by entryPoint, only after validateUserOp succeeded.\\n    function execFromEntryPoint(\\n        address dest,\\n        uint256 value,\\n        bytes calldata func\\n    ) external {\\n        _requireFromEntryPoint();\\n        _call(dest, value, func);\\n    }\\n\\n    /// implement template method of BaseWallet\\n    function _validateAndUpdateNonce(UserOperation calldata userOp)\\n        internal\\n        override\\n    {\\n        require(_nonce++ == userOp.nonce, \\\"wallet: invalid nonce\\\");\\n    }\\n\\n    /// implement template method of BaseWallet\\n    function _validateSignature(\\n        UserOperation calldata userOp,\\n        bytes32 requestId,\\n        address\\n    ) internal view virtual override {\\n        bytes32 hash = requestId.toEthSignedMessageHash();\\n        require(\\n            owner == hash.recover(userOp.signature),\\n            \\\"wallet: wrong signature\\\"\\n        );\\n        \\n        //TODO: add support for multiple signers\\n        //  address recovered = hash.recover(userOp.signature);\\n\\n        // if (block.timestamp < sessonExpiry) {\\n        //     // session ongoing, allow owner and session temporary address\\n        //     require(recovered == sessionAddr || recovered == owner, \\\"wallet:a wrong signature\\\");\\n        // } else {\\n        //     // session expired, only allow owner\\n        //     require(recovered == owner, \\\"wallet:b wrong signature\\\");\\n        // }\\n\\n        // // update session expiry\\n        // sessonExpiry = uint96(block.timestamp + 30 minutes);\\n    }\\n\\n    function _call(\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        (bool success, bytes memory result) = target.call{value: value}(data);\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * check current wallet deposit in the entryPoint\\n     */\\n    function getDeposit() public view returns (uint256) {\\n        return entryPoint().balanceOf(address(this));\\n    }\\n\\n    /**\\n     * deposit more funds for this wallet in the entryPoint\\n     */\\n    function addDeposit() public payable {\\n        (bool req, ) = address(entryPoint()).call{value: msg.value}(\\\"\\\");\\n        require(req);\\n    }\\n\\n    /**\\n     * withdraw value from the wallet's deposit\\n     * @param withdrawAddress target to send to\\n     * @param amount to withdraw\\n     */\\n    function withdrawDepositTo(address payable withdrawAddress, uint256 amount)\\n        public\\n        onlyOwner\\n    {\\n        entryPoint().withdrawTo(withdrawAddress, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x55277455cef1fab2389cd689e79f0c52bb1a79d84a709b1212951d507406c2c3\",\"license\":\"GPL-3.0\"},\"contracts/MyWalletDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./MyWallet.sol\\\";\\n\\n/**\\n * a sampler deployer contract for SimpleWallet\\n * the \\\"initCode\\\" for a wallet hold its address and a method call (deployWallet) with parameters, not actual constructor code.\\n */\\ncontract MyWalletDeployer {\\n    function deployWallet(\\n        IEntryPoint entryPoint,\\n        address owner,\\n        uint256 salt\\n    ) public returns (MyWallet) {\\n        return new MyWallet{salt: bytes32(salt)}(entryPoint, owner);\\n    }\\n\\n    function getDeploymentAddress(\\n        IEntryPoint entryPoint,\\n        address owner,\\n        uint256 salt\\n    ) public view returns (address) {\\n        address predictedAddress = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            bytes1(0xff),\\n                            address(this),\\n                            salt,\\n                            keccak256(\\n                                abi.encodePacked(\\n                                    type(MyWallet).creationCode,\\n                                    abi.encode(entryPoint, owner)\\n                                )\\n                            )\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n\\n        return predictedAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x8a27252202a0763463546bef54e3ef491c125f4b7e7f63584e3268a4c2b00bfa\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061242d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634861f39d1461003b578063ffb5b6af1461006b575b600080fd5b61005560048036038101906100509190610278565b61009b565b60405161006291906102da565b60405180910390f35b61008560048036038101906100809190610278565b61014b565b6040516100929190610354565b60405180910390f35b60008060ff60f81b3084604051806020016100b590610194565b6020820181038252601f19601f8201166040525088886040516020016100dc9291906103a2565b6040516020818303038152906040526040516020016100fc92919061043c565b604051602081830303815290604052805190602001206040516020016101259493929190610541565b6040516020818303038152906040528051906020012060001c9050809150509392505050565b60008160001b848460405161015f90610194565b61016a9291906103a2565b8190604051809103906000f590508015801561018a573d6000803e3d6000fd5b5090509392505050565b611e688061059083390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101d1826101a6565b9050919050565b60006101e3826101c6565b9050919050565b6101f3816101d8565b81146101fe57600080fd5b50565b600081359050610210816101ea565b92915050565b61021f816101c6565b811461022a57600080fd5b50565b60008135905061023c81610216565b92915050565b6000819050919050565b61025581610242565b811461026057600080fd5b50565b6000813590506102728161024c565b92915050565b600080600060608486031215610291576102906101a1565b5b600061029f86828701610201565b93505060206102b08682870161022d565b92505060406102c186828701610263565b9150509250925092565b6102d4816101c6565b82525050565b60006020820190506102ef60008301846102cb565b92915050565b6000819050919050565b600061031a610315610310846101a6565b6102f5565b6101a6565b9050919050565b600061032c826102ff565b9050919050565b600061033e82610321565b9050919050565b61034e81610333565b82525050565b60006020820190506103696000830184610345565b92915050565b600061037a826102ff565b9050919050565b600061038c8261036f565b9050919050565b61039c81610381565b82525050565b60006040820190506103b76000830185610393565b6103c460208301846102cb565b9392505050565b600081519050919050565b600081905092915050565b60005b838110156103ff5780820151818401526020810190506103e4565b60008484015250505050565b6000610416826103cb565b61042081856103d6565b93506104308185602086016103e1565b80840191505092915050565b6000610448828561040b565b9150610454828461040b565b91508190509392505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6104a76104a282610460565b61048c565b82525050565b60008160601b9050919050565b60006104c5826104ad565b9050919050565b60006104d7826104ba565b9050919050565b6104ef6104ea826101c6565b6104cc565b82525050565b6000819050919050565b61051061050b82610242565b6104f5565b82525050565b6000819050919050565b6000819050919050565b61053b61053682610516565b610520565b82525050565b600061054d8287610496565b60018201915061055d82866104de565b60148201915061056d82856104ff565b60208201915061057d828461052a565b6020820191508190509594505050505056fe60806040523480156200001157600080fd5b5060405162001e6838038062001e68833981810160405281019062000037919062000170565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001b7565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f382620000c6565b9050919050565b60006200010782620000e6565b9050919050565b6200011981620000fa565b81146200012557600080fd5b50565b60008151905062000139816200010e565b92915050565b6200014a81620000e6565b81146200015657600080fd5b50565b6000815190506200016a816200013f565b92915050565b600080604083850312156200018a5762000189620000c1565b5b60006200019a8582860162000128565b9250506020620001ad8582860162000159565b9150509250929050565b611ca180620001c76000396000f3fe6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b1461018e578063a9059cbb146101b9578063affed0e0146101e2578063b0d691fe1461020d578063c399ec8814610238578063d0cb75fa14610263576100b2565b80630565bb67146100b75780630825d1fc146100e05780631b71bb6e146101095780634a58db19146101325780634d44560d1461013c57806380c5c7d014610165576100b2565b366100b257005b600080fd5b3480156100c357600080fd5b506100de60048036038101906100d9919061106c565b61028c565b005b3480156100ec57600080fd5b506101076004803603810190610102919061113b565b6102e9565b005b34801561011557600080fd5b50610130600480360381019061012b91906111be565b61032e565b005b61013a610342565b005b34801561014857600080fd5b50610163600480360381019061015e9190611229565b6103c2565b005b34801561017157600080fd5b5061018c6004803603810190610187919061106c565b610442565b005b34801561019a57600080fd5b506101a361049f565b6040516101b09190611278565b60405180910390f35b3480156101c557600080fd5b506101e060048036038101906101db9190611229565b6104c5565b005b3480156101ee57600080fd5b506101f7610518565b60405161020491906112a2565b60405180910390f35b34801561021957600080fd5b50610222610547565b60405161022f919061131c565b60405180910390f35b34801561024457600080fd5b5061024d610571565b60405161025a91906112a2565b60405180910390f35b34801561026f57600080fd5b5061028a600480360381019061028591906113e3565b6105f9565b005b61029461070b565b6102e3848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107d3565b50505050565b6102f1610857565b6102fc8484846108ce565b600084806040019061030e9190611473565b90500361031f5761031e846109d6565b5b61032881610a83565b50505050565b610336610b1f565b61033f81610b29565b50565b600061034c610547565b73ffffffffffffffffffffffffffffffffffffffff163460405161036f90611507565b60006040518083038185875af1925050503d80600081146103ac576040519150601f19603f3d011682016040523d82523d6000602084013e6103b1565b606091505b50509050806103bf57600080fd5b50565b6103ca61070b565b6103d2610547565b73ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b815260040161040c92919061152b565b600060405180830381600087803b15801561042657600080fd5b505af115801561043a573d6000803e3d6000fd5b505050505050565b61044a610857565b610499848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107d3565b50505050565b6000600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104cd61070b565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610513573d6000803e3d6000fd5b505050565b60008060009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061057b610547565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105b39190611278565b602060405180830381865afa1580156105d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f49190611569565b905090565b61060161070b565b818190508484905014610649576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610640906115f3565b60405180910390fd5b60005b84849050811015610704576106f185858381811061066d5761066c611613565b5b905060200201602081019061068291906111be565b600085858581811061069757610696611613565b5b90506020028101906106a99190611473565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107d3565b80806106fc90611671565b91505061064c565b5050505050565b6000600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061079257503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6107d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c890611705565b60405180910390fd5b565b6000808473ffffffffffffffffffffffffffffffffffffffff1684846040516107fc919061178b565b60006040518083038185875af1925050503d8060008114610839576040519150601f19603f3d011682016040523d82523d6000602084013e61083e565b606091505b50915091508161085057805160208201fd5b5050505050565b61085f610547565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c3906117ee565b60405180910390fd5b565b60006108d983610be9565b9050610941848061014001906108ef9190611473565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082610c1990919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff166000600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c79061185a565b60405180910390fd5b50505050565b806020013560008081819054906101000a90046bffffffffffffffffffffffff1680929190610a0490611892565b91906101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506bffffffffffffffffffffffff1614610a80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7790611912565b60405180910390fd5b50565b60008114610b1c5760003373ffffffffffffffffffffffffffffffffffffffff16827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90604051610ad390611507565b600060405180830381858888f193505050503d8060008114610b11576040519150601f19603f3d011682016040523d82523d6000602084013e610b16565b606091505b50509050505b50565b610b2761070b565b565b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f450909c1478d09248269d4ad4fa8cba61ca3f50faed58c7aedefa51c7f62b83a60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081604051602001610bfc91906119aa565b604051602081830303815290604052805190602001209050919050565b6000806000610c288585610c40565b91509150610c3581610c91565b819250505092915050565b6000806041835103610c815760008060006020860151925060408601519150606086015160001a9050610c7587828585610e5d565b94509450505050610c8a565b60006002915091505b9250929050565b60006004811115610ca557610ca46119d0565b5b816004811115610cb857610cb76119d0565b5b0315610e5a5760016004811115610cd257610cd16119d0565b5b816004811115610ce557610ce46119d0565b5b03610d25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1c90611a4b565b60405180910390fd5b60026004811115610d3957610d386119d0565b5b816004811115610d4c57610d4b6119d0565b5b03610d8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8390611ab7565b60405180910390fd5b60036004811115610da057610d9f6119d0565b5b816004811115610db357610db26119d0565b5b03610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea90611b49565b60405180910390fd5b600480811115610e0657610e056119d0565b5b816004811115610e1957610e186119d0565b5b03610e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5090611bdb565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610e98576000600391509150610f60565b601b8560ff1614158015610eb05750601c8560ff1614155b15610ec2576000600491509150610f60565b600060018787878760405160008152602001604052604051610ee79493929190611c26565b6020604051602081039080840390855afa158015610f09573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f5757600060019250925050610f60565b80600092509250505b94509492505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f9e82610f73565b9050919050565b610fae81610f93565b8114610fb957600080fd5b50565b600081359050610fcb81610fa5565b92915050565b6000819050919050565b610fe481610fd1565b8114610fef57600080fd5b50565b60008135905061100181610fdb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261102c5761102b611007565b5b8235905067ffffffffffffffff8111156110495761104861100c565b5b60208301915083600182028301111561106557611064611011565b5b9250929050565b6000806000806060858703121561108657611085610f69565b5b600061109487828801610fbc565b94505060206110a587828801610ff2565b935050604085013567ffffffffffffffff8111156110c6576110c5610f6e565b5b6110d287828801611016565b925092505092959194509250565b600080fd5b600061016082840312156110fc576110fb6110e0565b5b81905092915050565b6000819050919050565b61111881611105565b811461112357600080fd5b50565b6000813590506111358161110f565b92915050565b6000806000806080858703121561115557611154610f69565b5b600085013567ffffffffffffffff81111561117357611172610f6e565b5b61117f878288016110e5565b945050602061119087828801611126565b93505060406111a187828801610fbc565b92505060606111b287828801610ff2565b91505092959194509250565b6000602082840312156111d4576111d3610f69565b5b60006111e284828501610fbc565b91505092915050565b60006111f682610f73565b9050919050565b611206816111eb565b811461121157600080fd5b50565b600081359050611223816111fd565b92915050565b600080604083850312156112405761123f610f69565b5b600061124e85828601611214565b925050602061125f85828601610ff2565b9150509250929050565b61127281610f93565b82525050565b600060208201905061128d6000830184611269565b92915050565b61129c81610fd1565b82525050565b60006020820190506112b76000830184611293565b92915050565b6000819050919050565b60006112e26112dd6112d884610f73565b6112bd565b610f73565b9050919050565b60006112f4826112c7565b9050919050565b6000611306826112e9565b9050919050565b611316816112fb565b82525050565b6000602082019050611331600083018461130d565b92915050565b60008083601f84011261134d5761134c611007565b5b8235905067ffffffffffffffff81111561136a5761136961100c565b5b60208301915083602082028301111561138657611385611011565b5b9250929050565b60008083601f8401126113a3576113a2611007565b5b8235905067ffffffffffffffff8111156113c0576113bf61100c565b5b6020830191508360208202830111156113dc576113db611011565b5b9250929050565b600080600080604085870312156113fd576113fc610f69565b5b600085013567ffffffffffffffff81111561141b5761141a610f6e565b5b61142787828801611337565b9450945050602085013567ffffffffffffffff81111561144a57611449610f6e565b5b6114568782880161138d565b925092505092959194509250565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126114905761148f611464565b5b80840192508235915067ffffffffffffffff8211156114b2576114b1611469565b5b6020830192506001820236038313156114ce576114cd61146e565b5b509250929050565b600081905092915050565b50565b60006114f16000836114d6565b91506114fc826114e1565b600082019050919050565b6000611512826114e4565b9150819050919050565b611525816111eb565b82525050565b6000604082019050611540600083018561151c565b61154d6020830184611293565b9392505050565b60008151905061156381610fdb565b92915050565b60006020828403121561157f5761157e610f69565b5b600061158d84828501611554565b91505092915050565b600082825260208201905092915050565b7f77726f6e67206172726179206c656e6774687300000000000000000000000000600082015250565b60006115dd601383611596565b91506115e8826115a7565b602082019050919050565b6000602082019050818103600083015261160c816115d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061167c82610fd1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116ae576116ad611642565b5b600182019050919050565b7f6f6e6c79206f776e657200000000000000000000000000000000000000000000600082015250565b60006116ef600a83611596565b91506116fa826116b9565b602082019050919050565b6000602082019050818103600083015261171e816116e2565b9050919050565b600081519050919050565b60005b8381101561174e578082015181840152602081019050611733565b60008484015250505050565b600061176582611725565b61176f81856114d6565b935061177f818560208601611730565b80840191505092915050565b6000611797828461175a565b915081905092915050565b7f77616c6c65743a206e6f742066726f6d20456e747279506f696e740000000000600082015250565b60006117d8601b83611596565b91506117e3826117a2565b602082019050919050565b60006020820190508181036000830152611807816117cb565b9050919050565b7f77616c6c65743a2077726f6e67207369676e6174757265000000000000000000600082015250565b6000611844601783611596565b915061184f8261180e565b602082019050919050565b6000602082019050818103600083015261187381611837565b9050919050565b60006bffffffffffffffffffffffff82169050919050565b600061189d8261187a565b91506bffffffffffffffffffffffff82036118bb576118ba611642565b5b600182019050919050565b7f77616c6c65743a20696e76616c6964206e6f6e63650000000000000000000000600082015250565b60006118fc601583611596565b9150611907826118c6565b602082019050919050565b6000602082019050818103600083015261192b816118ef565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000611973601c83611932565b915061197e8261193d565b601c82019050919050565b6000819050919050565b6119a461199f82611105565b611989565b82525050565b60006119b582611966565b91506119c18284611993565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611a35601883611596565b9150611a40826119ff565b602082019050919050565b60006020820190508181036000830152611a6481611a28565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611aa1601f83611596565b9150611aac82611a6b565b602082019050919050565b60006020820190508181036000830152611ad081611a94565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b33602283611596565b9150611b3e82611ad7565b604082019050919050565b60006020820190508181036000830152611b6281611b26565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611bc5602283611596565b9150611bd082611b69565b604082019050919050565b60006020820190508181036000830152611bf481611bb8565b9050919050565b611c0481611105565b82525050565b600060ff82169050919050565b611c2081611c0a565b82525050565b6000608082019050611c3b6000830187611bfb565b611c486020830186611c17565b611c556040830185611bfb565b611c626060830184611bfb565b9594505050505056fea264697066735822122032185b2ab83859867ad8c16c5095cbd3634c7102e8aeb18123c3417ce36ed4ea64736f6c63430008110033a2646970667358221220ea0afd223f8e45af4f75798f830237b78c48acea2bf2b63275f17b1bfb81d68c64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80634861f39d1461003b578063ffb5b6af1461006b575b600080fd5b61005560048036038101906100509190610278565b61009b565b60405161006291906102da565b60405180910390f35b61008560048036038101906100809190610278565b61014b565b6040516100929190610354565b60405180910390f35b60008060ff60f81b3084604051806020016100b590610194565b6020820181038252601f19601f8201166040525088886040516020016100dc9291906103a2565b6040516020818303038152906040526040516020016100fc92919061043c565b604051602081830303815290604052805190602001206040516020016101259493929190610541565b6040516020818303038152906040528051906020012060001c9050809150509392505050565b60008160001b848460405161015f90610194565b61016a9291906103a2565b8190604051809103906000f590508015801561018a573d6000803e3d6000fd5b5090509392505050565b611e688061059083390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101d1826101a6565b9050919050565b60006101e3826101c6565b9050919050565b6101f3816101d8565b81146101fe57600080fd5b50565b600081359050610210816101ea565b92915050565b61021f816101c6565b811461022a57600080fd5b50565b60008135905061023c81610216565b92915050565b6000819050919050565b61025581610242565b811461026057600080fd5b50565b6000813590506102728161024c565b92915050565b600080600060608486031215610291576102906101a1565b5b600061029f86828701610201565b93505060206102b08682870161022d565b92505060406102c186828701610263565b9150509250925092565b6102d4816101c6565b82525050565b60006020820190506102ef60008301846102cb565b92915050565b6000819050919050565b600061031a610315610310846101a6565b6102f5565b6101a6565b9050919050565b600061032c826102ff565b9050919050565b600061033e82610321565b9050919050565b61034e81610333565b82525050565b60006020820190506103696000830184610345565b92915050565b600061037a826102ff565b9050919050565b600061038c8261036f565b9050919050565b61039c81610381565b82525050565b60006040820190506103b76000830185610393565b6103c460208301846102cb565b9392505050565b600081519050919050565b600081905092915050565b60005b838110156103ff5780820151818401526020810190506103e4565b60008484015250505050565b6000610416826103cb565b61042081856103d6565b93506104308185602086016103e1565b80840191505092915050565b6000610448828561040b565b9150610454828461040b565b91508190509392505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6104a76104a282610460565b61048c565b82525050565b60008160601b9050919050565b60006104c5826104ad565b9050919050565b60006104d7826104ba565b9050919050565b6104ef6104ea826101c6565b6104cc565b82525050565b6000819050919050565b61051061050b82610242565b6104f5565b82525050565b6000819050919050565b6000819050919050565b61053b61053682610516565b610520565b82525050565b600061054d8287610496565b60018201915061055d82866104de565b60148201915061056d82856104ff565b60208201915061057d828461052a565b6020820191508190509594505050505056fe60806040523480156200001157600080fd5b5060405162001e6838038062001e68833981810160405281019062000037919062000170565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001b7565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f382620000c6565b9050919050565b60006200010782620000e6565b9050919050565b6200011981620000fa565b81146200012557600080fd5b50565b60008151905062000139816200010e565b92915050565b6200014a81620000e6565b81146200015657600080fd5b50565b6000815190506200016a816200013f565b92915050565b600080604083850312156200018a5762000189620000c1565b5b60006200019a8582860162000128565b9250506020620001ad8582860162000159565b9150509250929050565b611ca180620001c76000396000f3fe6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b1461018e578063a9059cbb146101b9578063affed0e0146101e2578063b0d691fe1461020d578063c399ec8814610238578063d0cb75fa14610263576100b2565b80630565bb67146100b75780630825d1fc146100e05780631b71bb6e146101095780634a58db19146101325780634d44560d1461013c57806380c5c7d014610165576100b2565b366100b257005b600080fd5b3480156100c357600080fd5b506100de60048036038101906100d9919061106c565b61028c565b005b3480156100ec57600080fd5b506101076004803603810190610102919061113b565b6102e9565b005b34801561011557600080fd5b50610130600480360381019061012b91906111be565b61032e565b005b61013a610342565b005b34801561014857600080fd5b50610163600480360381019061015e9190611229565b6103c2565b005b34801561017157600080fd5b5061018c6004803603810190610187919061106c565b610442565b005b34801561019a57600080fd5b506101a361049f565b6040516101b09190611278565b60405180910390f35b3480156101c557600080fd5b506101e060048036038101906101db9190611229565b6104c5565b005b3480156101ee57600080fd5b506101f7610518565b60405161020491906112a2565b60405180910390f35b34801561021957600080fd5b50610222610547565b60405161022f919061131c565b60405180910390f35b34801561024457600080fd5b5061024d610571565b60405161025a91906112a2565b60405180910390f35b34801561026f57600080fd5b5061028a600480360381019061028591906113e3565b6105f9565b005b61029461070b565b6102e3848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107d3565b50505050565b6102f1610857565b6102fc8484846108ce565b600084806040019061030e9190611473565b90500361031f5761031e846109d6565b5b61032881610a83565b50505050565b610336610b1f565b61033f81610b29565b50565b600061034c610547565b73ffffffffffffffffffffffffffffffffffffffff163460405161036f90611507565b60006040518083038185875af1925050503d80600081146103ac576040519150601f19603f3d011682016040523d82523d6000602084013e6103b1565b606091505b50509050806103bf57600080fd5b50565b6103ca61070b565b6103d2610547565b73ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b815260040161040c92919061152b565b600060405180830381600087803b15801561042657600080fd5b505af115801561043a573d6000803e3d6000fd5b505050505050565b61044a610857565b610499848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107d3565b50505050565b6000600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104cd61070b565b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610513573d6000803e3d6000fd5b505050565b60008060009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061057b610547565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105b39190611278565b602060405180830381865afa1580156105d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f49190611569565b905090565b61060161070b565b818190508484905014610649576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610640906115f3565b60405180910390fd5b60005b84849050811015610704576106f185858381811061066d5761066c611613565b5b905060200201602081019061068291906111be565b600085858581811061069757610696611613565b5b90506020028101906106a99190611473565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107d3565b80806106fc90611671565b91505061064c565b5050505050565b6000600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061079257503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6107d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c890611705565b60405180910390fd5b565b6000808473ffffffffffffffffffffffffffffffffffffffff1684846040516107fc919061178b565b60006040518083038185875af1925050503d8060008114610839576040519150601f19603f3d011682016040523d82523d6000602084013e61083e565b606091505b50915091508161085057805160208201fd5b5050505050565b61085f610547565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c3906117ee565b60405180910390fd5b565b60006108d983610be9565b9050610941848061014001906108ef9190611473565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082610c1990919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff166000600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c79061185a565b60405180910390fd5b50505050565b806020013560008081819054906101000a90046bffffffffffffffffffffffff1680929190610a0490611892565b91906101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506bffffffffffffffffffffffff1614610a80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7790611912565b60405180910390fd5b50565b60008114610b1c5760003373ffffffffffffffffffffffffffffffffffffffff16827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90604051610ad390611507565b600060405180830381858888f193505050503d8060008114610b11576040519150601f19603f3d011682016040523d82523d6000602084013e610b16565b606091505b50509050505b50565b610b2761070b565b565b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f450909c1478d09248269d4ad4fa8cba61ca3f50faed58c7aedefa51c7f62b83a60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081604051602001610bfc91906119aa565b604051602081830303815290604052805190602001209050919050565b6000806000610c288585610c40565b91509150610c3581610c91565b819250505092915050565b6000806041835103610c815760008060006020860151925060408601519150606086015160001a9050610c7587828585610e5d565b94509450505050610c8a565b60006002915091505b9250929050565b60006004811115610ca557610ca46119d0565b5b816004811115610cb857610cb76119d0565b5b0315610e5a5760016004811115610cd257610cd16119d0565b5b816004811115610ce557610ce46119d0565b5b03610d25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1c90611a4b565b60405180910390fd5b60026004811115610d3957610d386119d0565b5b816004811115610d4c57610d4b6119d0565b5b03610d8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8390611ab7565b60405180910390fd5b60036004811115610da057610d9f6119d0565b5b816004811115610db357610db26119d0565b5b03610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea90611b49565b60405180910390fd5b600480811115610e0657610e056119d0565b5b816004811115610e1957610e186119d0565b5b03610e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5090611bdb565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610e98576000600391509150610f60565b601b8560ff1614158015610eb05750601c8560ff1614155b15610ec2576000600491509150610f60565b600060018787878760405160008152602001604052604051610ee79493929190611c26565b6020604051602081039080840390855afa158015610f09573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f5757600060019250925050610f60565b80600092509250505b94509492505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f9e82610f73565b9050919050565b610fae81610f93565b8114610fb957600080fd5b50565b600081359050610fcb81610fa5565b92915050565b6000819050919050565b610fe481610fd1565b8114610fef57600080fd5b50565b60008135905061100181610fdb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261102c5761102b611007565b5b8235905067ffffffffffffffff8111156110495761104861100c565b5b60208301915083600182028301111561106557611064611011565b5b9250929050565b6000806000806060858703121561108657611085610f69565b5b600061109487828801610fbc565b94505060206110a587828801610ff2565b935050604085013567ffffffffffffffff8111156110c6576110c5610f6e565b5b6110d287828801611016565b925092505092959194509250565b600080fd5b600061016082840312156110fc576110fb6110e0565b5b81905092915050565b6000819050919050565b61111881611105565b811461112357600080fd5b50565b6000813590506111358161110f565b92915050565b6000806000806080858703121561115557611154610f69565b5b600085013567ffffffffffffffff81111561117357611172610f6e565b5b61117f878288016110e5565b945050602061119087828801611126565b93505060406111a187828801610fbc565b92505060606111b287828801610ff2565b91505092959194509250565b6000602082840312156111d4576111d3610f69565b5b60006111e284828501610fbc565b91505092915050565b60006111f682610f73565b9050919050565b611206816111eb565b811461121157600080fd5b50565b600081359050611223816111fd565b92915050565b600080604083850312156112405761123f610f69565b5b600061124e85828601611214565b925050602061125f85828601610ff2565b9150509250929050565b61127281610f93565b82525050565b600060208201905061128d6000830184611269565b92915050565b61129c81610fd1565b82525050565b60006020820190506112b76000830184611293565b92915050565b6000819050919050565b60006112e26112dd6112d884610f73565b6112bd565b610f73565b9050919050565b60006112f4826112c7565b9050919050565b6000611306826112e9565b9050919050565b611316816112fb565b82525050565b6000602082019050611331600083018461130d565b92915050565b60008083601f84011261134d5761134c611007565b5b8235905067ffffffffffffffff81111561136a5761136961100c565b5b60208301915083602082028301111561138657611385611011565b5b9250929050565b60008083601f8401126113a3576113a2611007565b5b8235905067ffffffffffffffff8111156113c0576113bf61100c565b5b6020830191508360208202830111156113dc576113db611011565b5b9250929050565b600080600080604085870312156113fd576113fc610f69565b5b600085013567ffffffffffffffff81111561141b5761141a610f6e565b5b61142787828801611337565b9450945050602085013567ffffffffffffffff81111561144a57611449610f6e565b5b6114568782880161138d565b925092505092959194509250565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126114905761148f611464565b5b80840192508235915067ffffffffffffffff8211156114b2576114b1611469565b5b6020830192506001820236038313156114ce576114cd61146e565b5b509250929050565b600081905092915050565b50565b60006114f16000836114d6565b91506114fc826114e1565b600082019050919050565b6000611512826114e4565b9150819050919050565b611525816111eb565b82525050565b6000604082019050611540600083018561151c565b61154d6020830184611293565b9392505050565b60008151905061156381610fdb565b92915050565b60006020828403121561157f5761157e610f69565b5b600061158d84828501611554565b91505092915050565b600082825260208201905092915050565b7f77726f6e67206172726179206c656e6774687300000000000000000000000000600082015250565b60006115dd601383611596565b91506115e8826115a7565b602082019050919050565b6000602082019050818103600083015261160c816115d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061167c82610fd1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116ae576116ad611642565b5b600182019050919050565b7f6f6e6c79206f776e657200000000000000000000000000000000000000000000600082015250565b60006116ef600a83611596565b91506116fa826116b9565b602082019050919050565b6000602082019050818103600083015261171e816116e2565b9050919050565b600081519050919050565b60005b8381101561174e578082015181840152602081019050611733565b60008484015250505050565b600061176582611725565b61176f81856114d6565b935061177f818560208601611730565b80840191505092915050565b6000611797828461175a565b915081905092915050565b7f77616c6c65743a206e6f742066726f6d20456e747279506f696e740000000000600082015250565b60006117d8601b83611596565b91506117e3826117a2565b602082019050919050565b60006020820190508181036000830152611807816117cb565b9050919050565b7f77616c6c65743a2077726f6e67207369676e6174757265000000000000000000600082015250565b6000611844601783611596565b915061184f8261180e565b602082019050919050565b6000602082019050818103600083015261187381611837565b9050919050565b60006bffffffffffffffffffffffff82169050919050565b600061189d8261187a565b91506bffffffffffffffffffffffff82036118bb576118ba611642565b5b600182019050919050565b7f77616c6c65743a20696e76616c6964206e6f6e63650000000000000000000000600082015250565b60006118fc601583611596565b9150611907826118c6565b602082019050919050565b6000602082019050818103600083015261192b816118ef565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000611973601c83611932565b915061197e8261193d565b601c82019050919050565b6000819050919050565b6119a461199f82611105565b611989565b82525050565b60006119b582611966565b91506119c18284611993565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611a35601883611596565b9150611a40826119ff565b602082019050919050565b60006020820190508181036000830152611a6481611a28565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611aa1601f83611596565b9150611aac82611a6b565b602082019050919050565b60006020820190508181036000830152611ad081611a94565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b33602283611596565b9150611b3e82611ad7565b604082019050919050565b60006020820190508181036000830152611b6281611b26565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611bc5602283611596565b9150611bd082611b69565b604082019050919050565b60006020820190508181036000830152611bf481611bb8565b9050919050565b611c0481611105565b82525050565b600060ff82169050919050565b611c2081611c0a565b82525050565b6000608082019050611c3b6000830187611bfb565b611c486020830186611c17565b611c556040830185611bfb565b611c626060830184611bfb565b9594505050505056fea264697066735822122032185b2ab83859867ad8c16c5095cbd3634c7102e8aeb18123c3417ce36ed4ea64736f6c63430008110033a2646970667358221220ea0afd223f8e45af4f75798f830237b78c48acea2bf2b63275f17b1bfb81d68c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "a sampler deployer contract for SimpleWallet the \"initCode\" for a wallet hold its address and a method call (deployWallet) with parameters, not actual constructor code.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}